array -> linear datastructure 

index wise insertion and deletion 

-------------------------------------------------------------------


Stack -> add : PUSH , remove : POP , display , peep

LIFO -> Last in First Out 

whatsapp -> 8.10 | 8.20 | 9.00  => 9.00 | 8.20  | 8.10  

gmail -> X Y Z ->  Z Y X 


gallery ->  1 2 3 4 -> 4 3  2 1 

?LIFO -> book -> 



stack 

4: 50  TOP 
3: 45
2: 34
1: 53
0: 23

PEEP -> 

enter location 
3
34

4:      
3:  
2: 34 TOP 
1: 53
0: 23

enter location 
3
23 

location  = 3 
index = 




4:     
3: 45 TOP 
2: 34
1: 53
0: 23

location : 3 
53 


index = top - location + 1 

----------------------------------------------------------------------------------------

amazon 
flipkart 

10 product qty => 20 buy 

FiFo -> First In First Out 

Queue --> 

5 -> 
     
Queue ->   Y Z A  B|  
           F      R  {max 5} 

           insertion -> BACK
           deletion  -> FRONT 

----------------------------------------------------------------------------------------

stack --- queue 
CARDS 8 
masterDeck [ 10 5 25 22 63 63 22 9 ]  {Q}

X                           Y
[10,25,63,22]  {Q}             [5,22,63,9] {Q} -> distribution 


battle 
    10,5

X:[25,63,22]               Y:[22,63,9] 

10 > 5 -> 10 -> X is Winner 

X:[25,63,22,10,5]               Y:[22,63,9] 


battle
25,22
X:[63,22,10,5]               y:[,63,9] 
X is Winner 
X:[63,22,10,5,25,22]         y:[63,9] 

battle 
63,63
X:[22,10,5,25,22]         y:[9]
tie 
next battle 
63,63,22,9
X:[10,5,25,22]         y:[]
X is Winner 
X:[10,5,25,22,63,63,22,9]         y:[]

battle -> Y IS Empty -> 

STOP -> Declare -> X IS THE WINNER OF THE GAME 

1) when deck of any player is empty - opponenet player declare as winner
2) your game perform maximum 1000 battle,after 1000 battle declare TIE in GAME 
3) Once the GAME OVER you can print entire deck of winner    
-------------------------------------------------------------





stack -> expression evaluate -> 

notation 

1) infix notation   => a+b 
2) prefix notation  => operator pref => +ab
3) postfix notation => post =>  ab+ 


infix to prefix and infix postfix 

 =>  a + b -c
     +ab - c
     -+abc 

     a + b - c 
     ab+   -  c 
     ab+c-


     a + b - c * d / f - g * c 
     a + b - *cd / f - g *  c 
     a + b - /*cdf - g * c 
     a + b - /*cdf - *gc 
     +ab -   /*cdf - *gc
     -+ab/*cdf - *gc
     --+ab/*cdf*gc


    a + (b - c) * d / (f - g) * c 
    a + -bc * d / -fg * c 
    +a*/*-bcd-fgc

    a + b - c $ d * g $ f ^ c 
    -+ab*$cd$g^fc 
    

    a + b / c * d / f $ x ^ z 

    +a/*/bcd$f^xz 
    

postfix using STAcK
  a + b - c * d 
  ab+cd*- 
  
1) operand -> string 
2) operator -> stack 
3) same level operator -> not in stack 
4) lower level comes first then higher leve [ -*   , not work -> *- ]  
  
  input         string        stack 
  a             a 
  +             a               + 
  b             ab              + 
  -             ab+             -
  c             ab+c            -
  *             ab+c            -*
  d             ab+cd          -* 
                ab+cd*-

 -----------------------------------------------

simple queue 


_   20 30 40 50 
    f        r 
insert - enqueue 
dequeue 

--------------------------------------------

int a ; //4 byte -> implicit -> release free -> ? 
scope 

int j;

void add(){
  int g;//4 byte
}

main(){

    int k; //4 byte 
  add(); 
}//end 


1)static memory allocation :  implicit
2)dynamic memory allocation : explicit


int a[5];

add -> allocate -> 
delete -> free release


c : calloc , malloc 
  : free 
  : realloc 

c++ : new keyword 
      delete keyword 

java : new , null ,gc 

----------------------------------------------------------------------------------------

sorting -> 

  12 25 63 85 96 105 
  105 96 85 63 25 12 


a=[12,34,5,44,66,344,67,2]

bubble sort --> 

selection sort --> 


insertion sort --> 

----------------------------------------------------------------------------------------
Parentheses validator  using stack 


enter the string 
str = (({}))
valid 

str = ({)}
invalid 

str=[{({})}]
valid 


push(char x)
pop peep peek 

------------------------------------------------------------------------------------------
















































    


     



 





